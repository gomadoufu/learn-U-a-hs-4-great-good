{- 13.5.1 do自由自在 -}
-- do記法の中で、モナドの結果を調べるには <- を使う。
-- 例えばMaybe Stringを <- で変数に束縛すれば、その変数の型はStringになる。
-- これは、 >>= を使ってモナド値をラムダ式に食わせた時と全く同じ

-- ただし、do式の最後のモナド値だけは、<- で束縛できない。
-- 最後のモナド値は、do式で糊付けしたモナド全体の結果になるから。

{- 13.5.3 パターンマッチと失敗 -}
-- do記法でモナド値を変数名に束縛するときには、let式や関数の引数の時と同様、パターンマッチが使える。

justH :: Maybe Char
justH = do
  (x : xs) <- Just "hello"
  return x

-- (繰り返すが、ここでのreturnは、値を返すという意味は全くなく、単に普通の値をモナド(今回はMaybe)に包むだけの関数)

-- さて、ではこのパターンマッチが失敗したらどうなるのか？
-- 普通は、otherwiseなどワイルドカードのアームを用意することで、パターンマッチが失敗した時の処理を書く

-- do式の中でパターンマッチが失敗した場合、Monad型クラスのfail関数が使われるので、以上終了という形ではなく、そのモナドの文脈にあった形で失敗を処理できる。

fail :: (Monad m) => String -> m a
fail msg = error msg

-- ...通常は異常終了させるみたいだが、Maybeの実装はこう、

-- fail _ = Nothing

-- これにより、例えばMaybeの文脈のdo記法の中でパターンマッチに失敗した場合、そのdo式全体がNothingになる。
