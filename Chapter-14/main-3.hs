{-14.2 Reader? それはあなたです！-}
{- 14.2.1 モナドとしての関数 -}
-- 関数の型 (->) r はファンクターであり、アプリカティブファンクターであるばかりでなく、モナドでもある。
-- 関数もまた、文脈を持った値だと見なすことができる。関数の文脈とは、「値がまだ手元になく、値が欲しければその関数を別の何かに適用しないといけない」というもの

-- 関数のモナドインスタンスはこんな感じ

-- instance Monad ((->) r)where
--     return x = _ -> x
--     h >>= f = \w -> f (h w) w

-- 1. 関数にとってのreturnは、pureと同じく最小の文脈に値を入れることで、それは恒等関数になる
-- 2. バインドは、まず全体がモナドを返す(ラムダ式)。hは関数モナドなので、いずれどこかで適用されるだろう値wを適用していずれ取得できるであろう値 h w を取り出し、それにfを適用する(そもそも>>=は、モナドm aから値を取り出して、a -> m bの関数に適用するための操作だった)。最後に、f (h w)に再び wを適用して値にする。なぜなら、ラムダ式全体が最終的に返すモナドであり、ラムダ式の右辺は値でなければならないため。最終的に、\w -> f (h w) wがバインドの結果m b となる。

-- 関数モナドをdo式で扱うと、このようになる

addStuff :: Int -> Int
addStuff = do
  a <- (* 2)
  b <- (+ 10)
  return (a + b)

-- 結果は * 2 3 と + 10 3 を足したものになっている。
-- 実はreturnの行も 3 が適用されているのだが、returnの定義により引数が無視されて、何も起こっていない。
-- 統一的に捉えると、すべての行が3を引数にとっている(読んでいる)と言える。
-- このことから、関数モナドはReaderモナドとも呼ばれる。
